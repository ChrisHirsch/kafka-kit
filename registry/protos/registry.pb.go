// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/registry.proto

package registry

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BrokerRequest struct {
	Tag                  []string `protobuf:"bytes,1,rep,name=tag,proto3" json:"tag,omitempty"`
	Id                   uint32   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BrokerRequest) Reset()         { *m = BrokerRequest{} }
func (m *BrokerRequest) String() string { return proto.CompactTextString(m) }
func (*BrokerRequest) ProtoMessage()    {}
func (*BrokerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4215e5fe8e6d7e5d, []int{0}
}

func (m *BrokerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BrokerRequest.Unmarshal(m, b)
}
func (m *BrokerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BrokerRequest.Marshal(b, m, deterministic)
}
func (m *BrokerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrokerRequest.Merge(m, src)
}
func (m *BrokerRequest) XXX_Size() int {
	return xxx_messageInfo_BrokerRequest.Size(m)
}
func (m *BrokerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BrokerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BrokerRequest proto.InternalMessageInfo

func (m *BrokerRequest) GetTag() []string {
	if m != nil {
		return m.Tag
	}
	return nil
}

func (m *BrokerRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type BrokerResponse struct {
	Brokers              map[uint32]*Broker `protobuf:"bytes,5,rep,name=brokers,proto3" json:"brokers,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Ids                  []uint32           `protobuf:"varint,6,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *BrokerResponse) Reset()         { *m = BrokerResponse{} }
func (m *BrokerResponse) String() string { return proto.CompactTextString(m) }
func (*BrokerResponse) ProtoMessage()    {}
func (*BrokerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4215e5fe8e6d7e5d, []int{1}
}

func (m *BrokerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BrokerResponse.Unmarshal(m, b)
}
func (m *BrokerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BrokerResponse.Marshal(b, m, deterministic)
}
func (m *BrokerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BrokerResponse.Merge(m, src)
}
func (m *BrokerResponse) XXX_Size() int {
	return xxx_messageInfo_BrokerResponse.Size(m)
}
func (m *BrokerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BrokerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BrokerResponse proto.InternalMessageInfo

func (m *BrokerResponse) GetBrokers() map[uint32]*Broker {
	if m != nil {
		return m.Brokers
	}
	return nil
}

func (m *BrokerResponse) GetIds() []uint32 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type Broker struct {
	// Registry metadata.
	Tags map[string]string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Broker metadata from ZooKeeper.
	Id                          uint32            `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	Listenersecurityprotocolmap map[string]string `protobuf:"bytes,6,rep,name=listenersecurityprotocolmap,proto3" json:"listenersecurityprotocolmap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Endpoints                   []string          `protobuf:"bytes,7,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	Rack                        string            `protobuf:"bytes,8,opt,name=rack,proto3" json:"rack,omitempty"`
	Jmxport                     uint32            `protobuf:"varint,9,opt,name=jmxport,proto3" json:"jmxport,omitempty"`
	Host                        string            `protobuf:"bytes,10,opt,name=host,proto3" json:"host,omitempty"`
	Timestamp                   int64             `protobuf:"varint,11,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Port                        uint32            `protobuf:"varint,12,opt,name=port,proto3" json:"port,omitempty"`
	Version                     uint32            `protobuf:"varint,13,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral        struct{}          `json:"-"`
	XXX_unrecognized            []byte            `json:"-"`
	XXX_sizecache               int32             `json:"-"`
}

func (m *Broker) Reset()         { *m = Broker{} }
func (m *Broker) String() string { return proto.CompactTextString(m) }
func (*Broker) ProtoMessage()    {}
func (*Broker) Descriptor() ([]byte, []int) {
	return fileDescriptor_4215e5fe8e6d7e5d, []int{2}
}

func (m *Broker) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Broker.Unmarshal(m, b)
}
func (m *Broker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Broker.Marshal(b, m, deterministic)
}
func (m *Broker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Broker.Merge(m, src)
}
func (m *Broker) XXX_Size() int {
	return xxx_messageInfo_Broker.Size(m)
}
func (m *Broker) XXX_DiscardUnknown() {
	xxx_messageInfo_Broker.DiscardUnknown(m)
}

var xxx_messageInfo_Broker proto.InternalMessageInfo

func (m *Broker) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Broker) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Broker) GetListenersecurityprotocolmap() map[string]string {
	if m != nil {
		return m.Listenersecurityprotocolmap
	}
	return nil
}

func (m *Broker) GetEndpoints() []string {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

func (m *Broker) GetRack() string {
	if m != nil {
		return m.Rack
	}
	return ""
}

func (m *Broker) GetJmxport() uint32 {
	if m != nil {
		return m.Jmxport
	}
	return 0
}

func (m *Broker) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Broker) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Broker) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Broker) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type TopicRequest struct {
	Tag                  []string `protobuf:"bytes,1,rep,name=tag,proto3" json:"tag,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TopicRequest) Reset()         { *m = TopicRequest{} }
func (m *TopicRequest) String() string { return proto.CompactTextString(m) }
func (*TopicRequest) ProtoMessage()    {}
func (*TopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4215e5fe8e6d7e5d, []int{3}
}

func (m *TopicRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TopicRequest.Unmarshal(m, b)
}
func (m *TopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TopicRequest.Marshal(b, m, deterministic)
}
func (m *TopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicRequest.Merge(m, src)
}
func (m *TopicRequest) XXX_Size() int {
	return xxx_messageInfo_TopicRequest.Size(m)
}
func (m *TopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TopicRequest proto.InternalMessageInfo

func (m *TopicRequest) GetTag() []string {
	if m != nil {
		return m.Tag
	}
	return nil
}

func (m *TopicRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type TopicResponse struct {
	Topics               map[string]*Topic `protobuf:"bytes,5,rep,name=topics,proto3" json:"topics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Names                []string          `protobuf:"bytes,6,rep,name=names,proto3" json:"names,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TopicResponse) Reset()         { *m = TopicResponse{} }
func (m *TopicResponse) String() string { return proto.CompactTextString(m) }
func (*TopicResponse) ProtoMessage()    {}
func (*TopicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4215e5fe8e6d7e5d, []int{4}
}

func (m *TopicResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TopicResponse.Unmarshal(m, b)
}
func (m *TopicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TopicResponse.Marshal(b, m, deterministic)
}
func (m *TopicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicResponse.Merge(m, src)
}
func (m *TopicResponse) XXX_Size() int {
	return xxx_messageInfo_TopicResponse.Size(m)
}
func (m *TopicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TopicResponse proto.InternalMessageInfo

func (m *TopicResponse) GetTopics() map[string]*Topic {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *TopicResponse) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

type Topic struct {
	// Registry metadata.
	Tags map[string]string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Topic metadata from ZooKeeper.
	Name                 string   `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Partitions           uint32   `protobuf:"varint,6,opt,name=partitions,proto3" json:"partitions,omitempty"`
	Replication          uint32   `protobuf:"varint,7,opt,name=replication,proto3" json:"replication,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Topic) Reset()         { *m = Topic{} }
func (m *Topic) String() string { return proto.CompactTextString(m) }
func (*Topic) ProtoMessage()    {}
func (*Topic) Descriptor() ([]byte, []int) {
	return fileDescriptor_4215e5fe8e6d7e5d, []int{5}
}

func (m *Topic) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Topic.Unmarshal(m, b)
}
func (m *Topic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Topic.Marshal(b, m, deterministic)
}
func (m *Topic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Topic.Merge(m, src)
}
func (m *Topic) XXX_Size() int {
	return xxx_messageInfo_Topic.Size(m)
}
func (m *Topic) XXX_DiscardUnknown() {
	xxx_messageInfo_Topic.DiscardUnknown(m)
}

var xxx_messageInfo_Topic proto.InternalMessageInfo

func (m *Topic) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Topic) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Topic) GetPartitions() uint32 {
	if m != nil {
		return m.Partitions
	}
	return 0
}

func (m *Topic) GetReplication() uint32 {
	if m != nil {
		return m.Replication
	}
	return 0
}

func init() {
	proto.RegisterType((*BrokerRequest)(nil), "registry.BrokerRequest")
	proto.RegisterType((*BrokerResponse)(nil), "registry.BrokerResponse")
	proto.RegisterMapType((map[uint32]*Broker)(nil), "registry.BrokerResponse.BrokersEntry")
	proto.RegisterType((*Broker)(nil), "registry.Broker")
	proto.RegisterMapType((map[string]string)(nil), "registry.Broker.ListenersecurityprotocolmapEntry")
	proto.RegisterMapType((map[string]string)(nil), "registry.Broker.TagsEntry")
	proto.RegisterType((*TopicRequest)(nil), "registry.TopicRequest")
	proto.RegisterType((*TopicResponse)(nil), "registry.TopicResponse")
	proto.RegisterMapType((map[string]*Topic)(nil), "registry.TopicResponse.TopicsEntry")
	proto.RegisterType((*Topic)(nil), "registry.Topic")
	proto.RegisterMapType((map[string]string)(nil), "registry.Topic.TagsEntry")
}

func init() { proto.RegisterFile("protos/registry.proto", fileDescriptor_4215e5fe8e6d7e5d) }

var fileDescriptor_4215e5fe8e6d7e5d = []byte{
	// 698 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x5d, 0x6e, 0xd3, 0x40,
	0x10, 0x96, 0xf3, 0x5b, 0x8f, 0x93, 0xb6, 0x0c, 0x3f, 0xdd, 0xba, 0x15, 0x32, 0x46, 0x45, 0x79,
	0x21, 0x56, 0x03, 0x12, 0x08, 0x1e, 0x90, 0x90, 0x50, 0x25, 0x54, 0x10, 0xb2, 0x2a, 0x1e, 0x78,
	0x73, 0xe3, 0x95, 0x59, 0x9a, 0x78, 0x8d, 0x77, 0x5b, 0x11, 0x55, 0x7d, 0xe1, 0x0a, 0xdc, 0x03,
	0x09, 0xee, 0xc0, 0x09, 0xb8, 0x02, 0x27, 0xe0, 0x04, 0x68, 0x77, 0xed, 0xc6, 0x69, 0x30, 0x88,
	0xf2, 0x36, 0x33, 0x99, 0xf9, 0x66, 0x66, 0xbf, 0x2f, 0x63, 0xb8, 0x9e, 0xe5, 0x5c, 0x72, 0x11,
	0xe4, 0x34, 0x61, 0x42, 0xe6, 0xb3, 0xa1, 0xf6, 0x71, 0xa5, 0xf4, 0xdd, 0xed, 0x84, 0xf3, 0x64,
	0x42, 0x83, 0x28, 0x63, 0x41, 0x94, 0xa6, 0x5c, 0x46, 0x92, 0xf1, 0x54, 0x98, 0x3c, 0x7f, 0x17,
	0xfa, 0x4f, 0x73, 0x7e, 0x44, 0xf3, 0x90, 0xbe, 0x3f, 0xa6, 0x42, 0xe2, 0x3a, 0x34, 0x65, 0x94,
	0x10, 0xcb, 0x6b, 0x0e, 0xec, 0x50, 0x99, 0xb8, 0x0a, 0x0d, 0x16, 0x93, 0x86, 0x67, 0x0d, 0xfa,
	0x61, 0x83, 0xc5, 0xfe, 0x17, 0x0b, 0x56, 0xcb, 0x1a, 0x91, 0xf1, 0x54, 0x50, 0x7c, 0x02, 0xdd,
	0x43, 0x1d, 0x11, 0xa4, 0xed, 0x35, 0x07, 0xce, 0x68, 0x67, 0x78, 0x3e, 0xcf, 0x62, 0x6a, 0xe1,
	0x8a, 0x67, 0xa9, 0xcc, 0x67, 0x61, 0x59, 0xa5, 0xba, 0xb2, 0x58, 0x90, 0x8e, 0xd7, 0x1c, 0xf4,
	0x43, 0x65, 0xba, 0xfb, 0xd0, 0xab, 0xa6, 0xaa, 0x8c, 0x23, 0x3a, 0x23, 0x96, 0x1e, 0x43, 0x99,
	0x78, 0x07, 0xda, 0x27, 0xd1, 0xe4, 0x98, 0xea, 0xd1, 0x9c, 0xd1, 0xfa, 0x52, 0x4b, 0xf3, 0xf3,
	0xa3, 0xc6, 0x43, 0xcb, 0xff, 0xd9, 0x84, 0x8e, 0x89, 0xe2, 0x10, 0x5a, 0x32, 0x4a, 0x84, 0xde,
	0xd0, 0x19, 0xb9, 0x17, 0xab, 0x86, 0x07, 0x51, 0x52, 0x4c, 0xa7, 0xf3, 0x8a, 0xf5, 0xdb, 0xe5,
	0xfa, 0x28, 0x60, 0x6b, 0xc2, 0x84, 0xa4, 0x29, 0xcd, 0x05, 0x1d, 0x1f, 0xe7, 0x4c, 0xce, 0xf4,
	0x53, 0x8e, 0xf9, 0x64, 0x1a, 0x65, 0x7a, 0x05, 0x67, 0xb4, 0xbb, 0x04, 0xbb, 0x5f, 0x5f, 0x63,
	0xba, 0xfd, 0x09, 0x15, 0xb7, 0xc1, 0xa6, 0x69, 0x9c, 0x71, 0x96, 0x4a, 0x41, 0xba, 0x9a, 0x9b,
	0x79, 0x00, 0x11, 0x5a, 0x79, 0x34, 0x3e, 0x22, 0x2b, 0x9e, 0x35, 0xb0, 0x43, 0x6d, 0x23, 0x81,
	0xee, 0xbb, 0xe9, 0x87, 0x8c, 0xe7, 0x92, 0xd8, 0x7a, 0xf6, 0xd2, 0x55, 0xd9, 0x6f, 0xb9, 0x90,
	0x04, 0x4c, 0xb6, 0xb2, 0x15, 0xbe, 0x64, 0x53, 0x2a, 0x64, 0x34, 0xcd, 0x88, 0xe3, 0x59, 0x83,
	0x66, 0x38, 0x0f, 0xa8, 0x0a, 0x0d, 0xd4, 0xd3, 0x40, 0xda, 0x56, 0xf8, 0x27, 0x34, 0x17, 0x8c,
	0xa7, 0xa4, 0x6f, 0xf0, 0x0b, 0xd7, 0x7d, 0x00, 0xf6, 0xf9, 0x1b, 0x56, 0x69, 0xb3, 0x0d, 0x6d,
	0xd7, 0xaa, 0xb4, 0xd9, 0x15, 0x92, 0xdc, 0x97, 0xe0, 0xfd, 0xed, 0x95, 0xfe, 0x05, 0xcf, 0xbf,
	0x0f, 0xbd, 0x03, 0x9e, 0xb1, 0x71, 0xbd, 0xb4, 0x11, 0x5a, 0x69, 0x34, 0x2d, 0x4b, 0xb5, 0xed,
	0x7f, 0xb6, 0xa0, 0x5f, 0x94, 0x15, 0xea, 0x7e, 0x0c, 0x1d, 0xa9, 0x02, 0xa5, 0xb8, 0x6f, 0xcf,
	0xc9, 0x5d, 0x48, 0x34, 0x5e, 0x21, 0x9e, 0xa2, 0x44, 0x8d, 0xa7, 0x60, 0x8d, 0xb6, 0xed, 0xd0,
	0x38, 0xee, 0x73, 0x70, 0x2a, 0xc9, 0xbf, 0xd9, 0x6a, 0x67, 0x51, 0xdc, 0x6b, 0x17, 0x5b, 0x56,
	0xd6, 0xfc, 0x66, 0x41, 0x5b, 0x07, 0xf1, 0xee, 0x82, 0xb4, 0x37, 0x2f, 0xd4, 0x2c, 0x29, 0xbb,
	0xdc, 0xbe, 0x3d, 0xdf, 0x1e, 0x6f, 0x02, 0x64, 0x51, 0x2e, 0x99, 0xbe, 0x11, 0xa4, 0xa3, 0x99,
	0xad, 0x44, 0xd0, 0x03, 0x27, 0xa7, 0xd9, 0x84, 0x8d, 0xf5, 0x15, 0x21, 0x5d, 0x9d, 0x50, 0x0d,
	0x5d, 0x9a, 0xfe, 0xd1, 0xd7, 0x16, 0xac, 0x84, 0xc5, 0xc4, 0x78, 0x00, 0xb0, 0x47, 0x65, 0x71,
	0x01, 0x70, 0x63, 0xf9, 0x9c, 0x68, 0x4a, 0x5d, 0x52, 0x77, 0x67, 0xfc, 0xab, 0x1f, 0xbf, 0xff,
	0xf8, 0xd4, 0xe8, 0xa3, 0x13, 0x9c, 0xec, 0x06, 0xe5, 0x99, 0x79, 0x03, 0x8e, 0x52, 0xd8, 0x7f,
	0xc0, 0x12, 0x0d, 0x8b, 0xb8, 0x5e, 0x81, 0x0d, 0xd4, 0x3f, 0x17, 0x5f, 0x81, 0xbd, 0x47, 0xa5,
	0x61, 0x15, 0x6f, 0x2c, 0x49, 0xc4, 0x00, 0x6f, 0xd4, 0x48, 0xc7, 0x47, 0x8d, 0xdb, 0x43, 0x50,
	0xb8, 0x85, 0x74, 0x5e, 0x03, 0xa8, 0x69, 0x2f, 0x0b, 0xb9, 0xa1, 0x21, 0xaf, 0xe0, 0xda, 0x1c,
	0xd2, 0x4c, 0x1a, 0x17, 0x02, 0x7f, 0x11, 0x65, 0x19, 0x4b, 0x93, 0x7a, 0xe8, 0xfa, 0x67, 0xb8,
	0xa5, 0xb1, 0xb7, 0x70, 0x53, 0x61, 0x4f, 0x0b, 0x1c, 0xd3, 0x24, 0x38, 0x55, 0x42, 0x3a, 0xc3,
	0xb8, 0xfc, 0x4a, 0x9c, 0xb7, 0xa9, 0x7d, 0xee, 0xda, 0x15, 0x3c, 0xdd, 0xc6, 0x45, 0xb2, 0xd0,
	0xc6, 0x3c, 0x7b, 0x70, 0xca, 0xe2, 0xb3, 0xc3, 0x8e, 0xbe, 0x10, 0xf7, 0x7e, 0x05, 0x00, 0x00,
	0xff, 0xff, 0xea, 0x38, 0x44, 0x8b, 0x07, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RegistryClient is the client API for Registry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistryClient interface {
	// GetBrokers returns a BrokerResponse with the brokers field populated
	// with full broker metadata. If the input BrokerRequest.id field is
	// non-nil, a single broker is returned matching the ID specified in the
	// Broker object. Otherwise all brokers are returned, optionally filtered
	// by any provided BrokerRequest.tags parameters.
	GetBrokers(ctx context.Context, in *BrokerRequest, opts ...grpc.CallOption) (*BrokerResponse, error)
	// ListBrokers returns a BrokerResponse with the ids field populated
	// with broker IDs. If the input BrokerRequest.id field is non-nil,
	// a single broker ID is returned matching the ID specified in the
	// Broker object if the broker exists. Otherwise all brokers are returned,
	// optionally filtered by any provided BrokerRequest.tags parameters.
	ListBrokers(ctx context.Context, in *BrokerRequest, opts ...grpc.CallOption) (*BrokerResponse, error)
	// GetTopics returns a TopicResponse with the topics field populated
	// with full topic metadata. If the input TopicRequest.name field is
	// non-nil, a single topic is returned matching the name specified in the
	// Topic object. Otherwise all topics are returned, optionally filtered
	// by any provided TopicRequest.tags parameters.
	GetTopics(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*TopicResponse, error)
	// ListTopics returns a TopicResponse with the names field populated
	// with topic names. If the input TopicRequest.name field is non-nil,
	// a single topic name is returned matching the name specified in the
	// Topic object if the topic exists. Otherwise all topics are returned,
	// optionally filtered by any provided TopicRequest.tags parameters.
	ListTopics(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*TopicResponse, error)
	// TopicMappings returns a BrokerResponse with the ids field
	// populated with broker IDs that hold at least one partition
	// for the requested topic. The topic is specified in the
	// TopicRequest.name field.
	TopicMappings(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*BrokerResponse, error)
	// BrokerMappings returns a TopicResponse with the names field
	// populated with topics that the broker holds at least one partition
	// for. The broker is specified in the BrokerRequest.id field.
	BrokerMappings(ctx context.Context, in *BrokerRequest, opts ...grpc.CallOption) (*TopicResponse, error)
}

type registryClient struct {
	cc *grpc.ClientConn
}

func NewRegistryClient(cc *grpc.ClientConn) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) GetBrokers(ctx context.Context, in *BrokerRequest, opts ...grpc.CallOption) (*BrokerResponse, error) {
	out := new(BrokerResponse)
	err := c.cc.Invoke(ctx, "/registry.Registry/GetBrokers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ListBrokers(ctx context.Context, in *BrokerRequest, opts ...grpc.CallOption) (*BrokerResponse, error) {
	out := new(BrokerResponse)
	err := c.cc.Invoke(ctx, "/registry.Registry/ListBrokers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) GetTopics(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*TopicResponse, error) {
	out := new(TopicResponse)
	err := c.cc.Invoke(ctx, "/registry.Registry/GetTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ListTopics(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*TopicResponse, error) {
	out := new(TopicResponse)
	err := c.cc.Invoke(ctx, "/registry.Registry/ListTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) TopicMappings(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*BrokerResponse, error) {
	out := new(BrokerResponse)
	err := c.cc.Invoke(ctx, "/registry.Registry/TopicMappings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) BrokerMappings(ctx context.Context, in *BrokerRequest, opts ...grpc.CallOption) (*TopicResponse, error) {
	out := new(TopicResponse)
	err := c.cc.Invoke(ctx, "/registry.Registry/BrokerMappings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryServer is the server API for Registry service.
type RegistryServer interface {
	// GetBrokers returns a BrokerResponse with the brokers field populated
	// with full broker metadata. If the input BrokerRequest.id field is
	// non-nil, a single broker is returned matching the ID specified in the
	// Broker object. Otherwise all brokers are returned, optionally filtered
	// by any provided BrokerRequest.tags parameters.
	GetBrokers(context.Context, *BrokerRequest) (*BrokerResponse, error)
	// ListBrokers returns a BrokerResponse with the ids field populated
	// with broker IDs. If the input BrokerRequest.id field is non-nil,
	// a single broker ID is returned matching the ID specified in the
	// Broker object if the broker exists. Otherwise all brokers are returned,
	// optionally filtered by any provided BrokerRequest.tags parameters.
	ListBrokers(context.Context, *BrokerRequest) (*BrokerResponse, error)
	// GetTopics returns a TopicResponse with the topics field populated
	// with full topic metadata. If the input TopicRequest.name field is
	// non-nil, a single topic is returned matching the name specified in the
	// Topic object. Otherwise all topics are returned, optionally filtered
	// by any provided TopicRequest.tags parameters.
	GetTopics(context.Context, *TopicRequest) (*TopicResponse, error)
	// ListTopics returns a TopicResponse with the names field populated
	// with topic names. If the input TopicRequest.name field is non-nil,
	// a single topic name is returned matching the name specified in the
	// Topic object if the topic exists. Otherwise all topics are returned,
	// optionally filtered by any provided TopicRequest.tags parameters.
	ListTopics(context.Context, *TopicRequest) (*TopicResponse, error)
	// TopicMappings returns a BrokerResponse with the ids field
	// populated with broker IDs that hold at least one partition
	// for the requested topic. The topic is specified in the
	// TopicRequest.name field.
	TopicMappings(context.Context, *TopicRequest) (*BrokerResponse, error)
	// BrokerMappings returns a TopicResponse with the names field
	// populated with topics that the broker holds at least one partition
	// for. The broker is specified in the BrokerRequest.id field.
	BrokerMappings(context.Context, *BrokerRequest) (*TopicResponse, error)
}

func RegisterRegistryServer(s *grpc.Server, srv RegistryServer) {
	s.RegisterService(&_Registry_serviceDesc, srv)
}

func _Registry_GetBrokers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrokerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetBrokers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/GetBrokers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetBrokers(ctx, req.(*BrokerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_ListBrokers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrokerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ListBrokers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/ListBrokers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ListBrokers(ctx, req.(*BrokerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_GetTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/GetTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetTopics(ctx, req.(*TopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_ListTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ListTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/ListTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ListTopics(ctx, req.(*TopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_TopicMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).TopicMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/TopicMappings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).TopicMappings(ctx, req.(*TopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_BrokerMappings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrokerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).BrokerMappings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/BrokerMappings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).BrokerMappings(ctx, req.(*BrokerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "registry.Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBrokers",
			Handler:    _Registry_GetBrokers_Handler,
		},
		{
			MethodName: "ListBrokers",
			Handler:    _Registry_ListBrokers_Handler,
		},
		{
			MethodName: "GetTopics",
			Handler:    _Registry_GetTopics_Handler,
		},
		{
			MethodName: "ListTopics",
			Handler:    _Registry_ListTopics_Handler,
		},
		{
			MethodName: "TopicMappings",
			Handler:    _Registry_TopicMappings_Handler,
		},
		{
			MethodName: "BrokerMappings",
			Handler:    _Registry_BrokerMappings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/registry.proto",
}
